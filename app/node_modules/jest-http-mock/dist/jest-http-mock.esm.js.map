{"version":3,"file":"jest-http-mock.esm.js","sources":["../src/utils.ts","../src/index.ts"],"sourcesContent":["import * as http from 'http';\n\nexport class Resolvable<T = any> {\n  public readonly promise: Promise<T>;\n  public settled = false;\n  private _resolve?: (data: T) => void;\n  private _reject?: (error: any) => void;\n\n  constructor() {\n    this.promise = new Promise<T>((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n  }\n\n  public resolve = (data: T) => {\n    if (this._resolve) {\n      this.settled = true;\n      this._resolve(data);\n    }\n  };\n\n  public reject = (error?: any) => {\n    if (this._reject) {\n      this.settled = true;\n      this._reject(error);\n    }\n  };\n}\n\nexport function bodyReader(\n  request: http.IncomingMessage\n): () => Promise<Buffer> {\n  let promise: Promise<Buffer>;\n\n  return () => {\n    if (!promise) {\n      promise = new Promise<Buffer>((resolve, reject) => {\n        const body: Buffer[] = [];\n        let rejected = false;\n\n        request.on('data', chunk => {\n          body.push(chunk);\n        });\n\n        request.on('error', error => {\n          rejected = true;\n          reject(error);\n        });\n\n        request.on('end', () => {\n          if (rejected) {\n            return;\n          }\n\n          resolve(Buffer.concat(body));\n        });\n      });\n    }\n\n    return promise;\n  };\n}\n","import * as http from 'http';\nimport { Socket } from 'net';\n\nimport { bodyReader, Resolvable } from './utils';\n\nexport interface MockHttpServerOptions {\n  port: number;\n  timeout: number;\n}\n\nexport interface MockHttpServer {\n  readonly port: number;\n  readonly host: string;\n  waitForRequest(path: string): Promise<RequestMapEntry>;\n  stopWaiting(requestPromise: Promise<RequestMapEntry>): void;\n}\n\nfunction generatePort(): number {\n  return Math.floor(4000 + Math.random() * 4000);\n}\n\nexport type RequestHandler = (\n  request: http.IncomingMessage,\n  response: http.ServerResponse,\n  error?: Error\n) => void;\n\ninterface RequestMapEntry {\n  request: http.IncomingMessage;\n  response: http.ServerResponse;\n  body(encoding: BufferEncoding): Promise<string>;\n  body(): Promise<Buffer>;\n}\n\ninterface RequestHandlerEntry {\n  path: string;\n  handler: RequestHandler;\n  resolvable: Resolvable<RequestMapEntry>;\n  promise?: Promise<RequestMapEntry>;\n}\n\nclass MockHttpServerImpl implements MockHttpServer {\n  private _server?: http.Server;\n  private _promiseStart?: Resolvable<this>;\n  private _requestHandlers: RequestHandlerEntry[] = [];\n  private _activeResponses: http.ServerResponse[] = [];\n  private _running = false;\n  private _connections: Socket[] = [];\n\n  constructor(private readonly _options: MockHttpServerOptions) {}\n\n  get port(): number {\n    return this._options.port;\n  }\n\n  get host(): string {\n    return `http://localhost:${this.port}`;\n  }\n\n  clear() {\n    this._requestHandlers = [];\n    this._activeResponses = [];\n\n    for (const conn of this._connections) {\n      conn.unref();\n      conn.destroy();\n    }\n\n    this._connections = [];\n  }\n\n  start(): Promise<this> {\n    if (this._running) {\n      return this._promiseStart?.promise ?? Promise.reject('Unexpected state');\n    }\n\n    this._running = true;\n    this._promiseStart = new Resolvable<this>();\n\n    this._server = http.createServer((request, response) => {\n      const url = new URL(request.url ?? '', this.host);\n      const handlers = this._requestHandlers.filter(\n        h => h.path === url.pathname\n      );\n\n      // Всегда и сразу разрешаем CORS\n      response.setHeader(\n        'access-control-allow-origin',\n        request.headers.origin ?? '*'\n      );\n\n      for (const handler of handlers) {\n        handler.handler(request, response);\n      }\n\n      this._activeResponses.push(response);\n    });\n\n    this._server.listen(this._options.port, () => {\n      this._promiseStart?.resolve(this);\n    });\n\n    this._server.on('connection', conn => {\n      this._connections.push(conn);\n\n      conn.on('close', () => {\n        this._connections = this._connections.filter(c => c !== conn);\n      });\n    });\n\n    return this._promiseStart.promise;\n  }\n\n  stop(): Promise<void> {\n    this._running = false;\n\n    return new Promise((resolve, reject) => {\n      this.clear();\n      this._server?.unref();\n\n      this._server?.close((error?) => {\n        this._server = undefined;\n\n        if (error) {\n          reject(error);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n\n  waitForRequest(path: string): Promise<RequestMapEntry> {\n    const resolvable = new Resolvable<RequestMapEntry>();\n\n    // Обработчик запроса выстреливает один раз\n    const handler: RequestHandler = (request, response, error) => {\n      this._removeRequestHandler(handler);\n      this._activeResponses = this._activeResponses.filter(r => r !== response);\n\n      if (error) {\n        resolvable.reject(error);\n        return;\n      }\n\n      // Читаем тело запроса\n      const body = bodyReader(request);\n\n      resolvable.resolve({\n        request,\n        response,\n\n        // Тут тело запроса парсится\n        body(encoding?: BufferEncoding): Promise<any> {\n          return body().then(buffer => {\n            if (encoding === undefined) {\n              return buffer;\n            } else {\n              return buffer.toString(encoding);\n            }\n          });\n        },\n      });\n    };\n\n    const entry: RequestHandlerEntry = { path, handler, resolvable };\n    this._requestHandlers.push(entry);\n\n    // Setting up rejection by timeout\n    const timer = setTimeout(() => {\n      this._removeRequestHandler(handler);\n      resolvable.reject(new Error('Timed out'));\n    }, this._options.timeout);\n\n    entry.promise = resolvable.promise\n      .then(result => [null, result])\n      .catch(error => [error, null])\n      .then(([error, result]) => {\n        clearTimeout(timer);\n\n        if (error) {\n          return Promise.reject(error);\n        } else {\n          return Promise.resolve(result);\n        }\n      });\n\n    return entry.promise;\n  }\n\n  stopWaiting(requestPromise: Promise<RequestMapEntry>): void {\n    this._requestHandlers = this._requestHandlers.filter(handler => {\n      if (handler.promise === requestPromise) {\n        handler.resolvable.reject(new Error('Cancelled'));\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  private _removeRequestHandler(handler: RequestHandler) {\n    this._requestHandlers = this._requestHandlers.filter(\n      h => h.handler !== handler\n    );\n  }\n}\n\nfunction mockHttpServer(\n  options: Partial<MockHttpServerOptions> = {}\n): MockHttpServerImpl {\n  return new MockHttpServerImpl({\n    ...options,\n    port: options.port ?? generatePort(),\n    timeout: options.timeout ?? 1000,\n  });\n}\n\nexport function useMockHttpServer(\n  options: Partial<MockHttpServerOptions> = {}\n): MockHttpServer {\n  const server = mockHttpServer(options);\n\n  beforeEach(() => {\n    server.clear();\n    return server.start();\n  });\n\n  afterEach(() => {\n    return server.stop();\n  });\n\n  return server;\n}\n"],"names":["Resolvable","data","_resolve","settled","error","_reject","promise","Promise","resolve","reject","bodyReader","request","body","rejected","on","chunk","push","Buffer","concat","generatePort","Math","floor","random","MockHttpServerImpl","_options","clear","_requestHandlers","_activeResponses","_connections","conn","unref","destroy","start","_running","_promiseStart","_server","http","response","url","URL","host","handlers","filter","h","path","pathname","setHeader","headers","origin","handler","listen","port","c","stop","close","undefined","waitForRequest","resolvable","_removeRequestHandler","r","encoding","then","buffer","toString","entry","timer","setTimeout","Error","timeout","result","clearTimeout","stopWaiting","requestPromise","mockHttpServer","options","useMockHttpServer","server","beforeEach","afterEach"],"mappings":"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"}